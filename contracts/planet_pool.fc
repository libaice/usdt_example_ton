#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes-planet_pool.fc";

const const::tx_fee_send_jetton = 40000000;
;; dict  token -> planet value

(slice, slice, slice, cell, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_msg_addr(), ;; usdt_receiver_address
        ds~load_msg_addr(), ;; jetton_master_address
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_dict(), ;; user_energy_info
        ds~load_dict()      ;; user_usdt_deposited_amount
    );
}
;;
() save_data(slice owner_address, slice usdt_receiver, slice jetton_master_address, cell jetton_wallet_code, cell user_energy, cell user_usdt_deposited) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_slice(usdt_receiver)
        .store_slice(jetton_master_address)
        .store_ref(jetton_wallet_code)
        .store_dict(user_energy)
        .store_dict(user_usdt_deposited)
        .end_cell());
}

() send_jetton(slice recepient, slice jetton_wallet, int amount, slice JETTON_MASTER_ADDRESS, cell JETTON_BYTE_CODE) impure inline {
    if (amount == 0) {
        return ();
    }

    var msg = begin_cell()
        .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
        .store_slice(jetton_wallet)
        .store_coins(45000000)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::transfer(), 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(recepient)
        .store_uint(0, 2)
        .store_uint(0, 1)
        .store_coins(0)
        .store_uint(0, 1);
    send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors
}

() recv_internal(int mag_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (slice owner_address, slice usdt_receiver, slice jetton_master_address, cell jetton_wallet_code, cell user_energy, cell user_usdt_deposited) = load_data();


    if (op == op::transfer_notification()) {
        int send_amount = in_msg_body~load_coins();

        ;; throw_unless(109, equal_slices(sender_address, calculate_user_jetton_wallet_address(my_address(), jetton_master_address, jetton_wallet_code)));
        slice origin_sender = in_msg_body~load_msg_addr();
        (slice energy_data, int f) = user_energy.udict_get?(256, slice_hash(origin_sender));
        if (f == 0) {
            return ();
        }
        int energy = energy_data~load_uint(32);
        if (energy < 12) {
            throw_if(74, send_amount < 100000000);
        } elseif (energy < 30) {
            throw_if(74, send_amount < 200000000);
        } elseif (energy < 50) {
            throw_if(74, send_amount < 300000000);
        } elseif (energy < 70) {
            throw_if(74, send_amount < 400000000);
        } elseif (energy < 100) {
            throw_if(74, send_amount < 500000000);
        } elseif (energy == 100) {
            throw_if(74, send_amount < 600000000);
        } else {
            int usdt_amount_need = 600000000 + (energy - 100) / 10 * 100000000;
            throw_if(74, send_amount < usdt_amount_need);
        }
        slice usdt_deposited_amount = begin_cell().store_uint(send_amount, 64).end_cell().begin_parse();
        user_usdt_deposited~udict_set(256, slice_hash(origin_sender), usdt_deposited_amount);
        save_data(owner_address, usdt_receiver, jetton_master_address, jetton_wallet_code, user_energy, user_usdt_deposited);

        ;; send_jetton(usdt_receiver, send_amount, jetton_master_address, jetton_wallet_code);
        return ();
    }

    if (op == op::update_user_energy()) {
        throw_unless(73, equal_slices(sender_address, owner_address));
        slice user_address = in_msg_body~load_msg_addr();
        int energy_value = in_msg_body~load_uint(32);
        slice energy = begin_cell().store_uint(energy_value, 32).end_cell().begin_parse();
        user_energy~udict_set(256, slice_hash(user_address), energy);
        save_data(owner_address, usdt_receiver, jetton_master_address, jetton_wallet_code, user_energy, user_usdt_deposited);
        return ();
    }

    if (op == op::withdraw()) {
        throw_unless(73, equal_slices(sender_address, owner_address));
        (slice owner_address, slice usdt_receiver, slice jetton_master_address, cell jetton_wallet_code, cell user_energy, cell user_usdt_deposited) = load_data();

        int withdraw_amount = in_msg_body~load_uint(64);
        slice pool_usdt_address = in_msg_body~load_msg_addr();
        send_jetton(usdt_receiver, pool_usdt_address, withdraw_amount, jetton_master_address, jetton_wallet_code);
        return ();
    }

    throw(0xffff);
}

(int) get_user_energy(slice sender_address) method_id {
    (slice owner_address, slice usdt_receiver, slice jetton_master_address, cell jetton_wallet_code, cell user_energy, cell user_usdt_deposited) = load_data();
    (slice data, int f) = user_energy.udict_get?(256, slice_hash(sender_address));
    if (f == 0) {
        return 0;
    }
    int energy = data~load_uint(32);
    return energy;
}

(int) get_user_activation(slice sender_address) method_id {
    (slice owner_address, slice usdt_receiver, slice jetton_master_address, cell jetton_wallet_code, cell user_energy, cell user_usdt_deposited) = load_data();
    (slice data, int f) = user_usdt_deposited.udict_get?(256, slice_hash(sender_address));
    if (f == 0) {
        return 0;
    }
    int usdt_deposited = data~load_uint(64);
    return usdt_deposited;
}

(slice, slice, slice, cell, cell, cell) get_planet_pool_data() method_id {
    return load_data();
}